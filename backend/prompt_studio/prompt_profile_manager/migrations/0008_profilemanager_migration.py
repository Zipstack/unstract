# Generated by Django 4.2.1 on 2024-03-08 06:30

from typing import Any

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        (
            "prompt_profile_manager",
            "0007_profilemanager_is_default_and_more",
        ),
        (
            "prompt_studio",
            "0006_alter_toolstudioprompt_prompt_key_and_more",
        ),
        (
            "prompt_studio_core",
            "0007_remove_customtool_default_profile_and_more",
        ),
    ]

    def MigrateProfileManager(apps: Any, schema_editor: Any) -> None:
        CustomTool = apps.get_model("prompt_studio_core", "CustomTool")
        ProfileManager = apps.get_model("prompt_profile_manager", "ProfileManager")
        ToolStudioPrompt = apps.get_model("prompt_studio", "ToolStudioPrompt")

        # Iterate over prompt studio tools
        custom_tools = CustomTool.objects.all()
        for custom_tool in custom_tools:
            custom_prompts = ToolStudioPrompt.objects.filter(
                tool_id=custom_tool
            ).distinct("profile_manager")
            """Iterate over prompts inside specific tool and return the once
            which has distinct profile manager."""

            for index, custom_prompt in enumerate(custom_prompts):
                """There can be scenario where individual prompts wont have a
                profile manager attached."""
                if not custom_prompt.profile_manager:
                    continue
                profile_manager = ProfileManager.objects.get(
                    pk=custom_prompt.profile_manager.profile_id
                )
                """Check this profile manager to see if the profile manager is
                tagged to any prompt tool If its none,  meaning profile manager
                created was global and before migration."""

                if not profile_manager.prompt_studio_tool:
                    # Copy Profile manager Id before replicating
                    profile_id = profile_manager.profile_id
                    # Replicate those profile manager
                    replicated_profile_manager = profile_manager
                    replicated_profile_manager.profile_id = None
                    replicated_profile_manager.profile_name = f"Profile_{index+1}"
                    """Attach the replicated profile manager to the
                    corresponding prompt tool."""
                    replicated_profile_manager.prompt_studio_tool = custom_tool
                    replicated_profile_manager.save()
                    """Custom prompts where the profile manager and tool
                    associated  replace it with replicated profile manager."""

                    ToolStudioPrompt.objects.filter(
                        profile_manager=profile_id, tool_id=custom_tool
                    ).update(profile_manager=replicated_profile_manager)

    operations = [
        migrations.RunPython(
            MigrateProfileManager, reverse_code=migrations.RunPython.noop
        ),
    ]
