# Generated by Django 4.2.1 on 2024-01-23 11:18

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("project", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="WorkflowExecution",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "pipeline_id",
                    models.UUIDField(
                        db_comment="ID of the associated pipeline, if applicable",
                        editable=False,
                        null=True,
                    ),
                ),
                (
                    "task_id",
                    models.UUIDField(
                        db_comment="task id of asynchronous execution",
                        editable=False,
                        null=True,
                    ),
                ),
                (
                    "workflow_id",
                    models.UUIDField(
                        db_comment="Id of workflow to be executed",
                        editable=False,
                    ),
                ),
                (
                    "project_settings_id",
                    models.UUIDField(
                        db_comment="Id of project settings used while execution",
                        editable=False,
                    ),
                ),
                (
                    "execution_mode",
                    models.CharField(
                        choices=[
                            ("INSTANT", "will be executed immediately"),
                            ("QUEUE", "will be placed in a queue"),
                        ],
                        db_comment="Mode of execution",
                    ),
                ),
                (
                    "execution_method",
                    models.CharField(
                        choices=[
                            ("DIRECT", " Execution triggered manually"),
                            ("SCHEDULED", "Scheduled execution"),
                        ],
                        db_comment="Method of execution",
                    ),
                ),
                (
                    "execution_type",
                    models.CharField(
                        choices=[
                            ("COMPLETE", "For complete execution"),
                            ("STEP", "For step-by-step execution "),
                        ],
                        db_comment="Type of execution",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        db_comment="Current status of execution", default=""
                    ),
                ),
                (
                    "error_message",
                    models.CharField(
                        blank=True,
                        db_comment="Details of encountered errors",
                        default="",
                        max_length=256,
                    ),
                ),
                (
                    "attempts",
                    models.IntegerField(
                        db_comment="number of attempts taken", default=0
                    ),
                ),
                (
                    "execution_time",
                    models.FloatField(
                        db_comment="execution time in seconds", default=0
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Workflow",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("prompt_name", models.CharField(default="", max_length=32)),
                ("description", models.TextField(default="", max_length=490)),
                (
                    "workflow_name",
                    models.CharField(max_length=128, unique=True),
                ),
                (
                    "settings",
                    models.JSONField(db_comment="Workflow settings", null=True),
                ),
                ("prompt_text", models.TextField(default="")),
                ("is_active", models.BooleanField(default=False)),
                ("status", models.CharField(default="", max_length=16)),
                ("llm_response", models.TextField()),
                (
                    "deployment_type",
                    models.CharField(
                        choices=[
                            ("DEFAULT", "Not ready yet"),
                            ("ETL", "ETL pipeline"),
                            ("TASK", "TASK pipeline"),
                            ("API", "API deployment"),
                            ("APP", "App deployment"),
                        ],
                        db_comment="Type of workflow deployment",
                        default="DEFAULT",
                    ),
                ),
                (
                    "source_settings",
                    models.JSONField(
                        db_comment="Settings for the Source module", null=True
                    ),
                ),
                (
                    "destination_settings",
                    models.JSONField(
                        db_comment="Settings for the Destination module",
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_workflow",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="modified_workflow",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_workflow",
                        to="project.project",
                    ),
                ),
                (
                    "workflow_owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="workflow_owner",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FileHistory",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "cache_key",
                    models.CharField(
                        db_comment="Hash value of file contents, WF and tool modified times",
                        max_length=64,
                    ),
                ),
                (
                    "status",
                    models.TextField(
                        choices=[
                            ("PENDING", "PENDING"),
                            ("INITIATED", "INITIATED"),
                            ("QUEUED", "QUEUED"),
                            ("READY", "READY"),
                            ("EXECUTING", "EXECUTING"),
                            ("COMPLETED", "COMPLETED"),
                            ("STOPPED", "STOPPED"),
                            ("ERROR", "ERROR"),
                        ],
                        db_comment="Latest status of execution",
                    ),
                ),
                (
                    "error",
                    models.TextField(
                        blank=True, db_comment="Error message", default=""
                    ),
                ),
                (
                    "result",
                    models.TextField(blank=True, db_comment="Result from execution"),
                ),
                (
                    "workflow",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="filehistory_workflow",
                        to="workflow.workflow",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
