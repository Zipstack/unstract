# Generated by Django 4.2.1 on 2024-08-21 02:56

from typing import Any, Optional

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("endpoint", "0003_alter_workflowendpoint_connection_type"),
    ]

    def migrate_to_support_multiple_folder_input(apps: Any, schema_editor: Any) -> None:
        """Migrates the data for multiple folders as source input.

        Converts a string field `rootFolder` in `configuration` JSON to
        accept a list of values. Empty strings are converted into '/' to
        handle reads from the root of the file system.

        Parameters:
            apps (Any): The registry of installed applications.
            schema_editor (Any): The schema editor for the database operation.

        Returns:
            None: This method does not return anything.
        """
        WorkflowEndpoint = apps.get_model("endpoint", "WorkflowEndpoint")

        endpoints_to_update = WorkflowEndpoint.objects.filter(endpoint_type="SOURCE")
        for endpoint in endpoints_to_update:
            configuration: Optional[dict[str, Any]] = endpoint.configuration
            # Skip in case of partially initialized sources
            if not configuration:
                continue
            root_folder = configuration.get("rootFolder", "")

            # Convert rootFolder to folders list
            if not root_folder:
                folders = ["/"]
            else:
                folders = [root_folder]

            # Update the configuration JSON
            configuration["folders"] = folders

            # Save the updated configuration back to the model
            endpoint.configuration = configuration
            endpoint.save()

    def migrate_to_support_single_folder_input(apps: Any, schema_editor: Any) -> None:
        """Reverses the migration by converting folders list back to a string.

        Takes the first element of the `folders` list and reassigns it to
        `rootFolder`. If the list is empty, assigns an empty string to `rootFolder`.

        Parameters:
            apps (Any): The registry of installed applications.
            schema_editor (Any): The schema editor for the database operation.

        Returns:
            None: This method does not return anything.
        """
        WorkflowEndpoint = apps.get_model("endpoint", "WorkflowEndpoint")

        endpoints_to_update = WorkflowEndpoint.objects.filter(endpoint_type="SOURCE")

        for endpoint in endpoints_to_update:
            configuration: Optional[dict[str, Any]] = endpoint.configuration
            # Skip in case of partially initialized sources
            if not configuration:
                continue
            folders = configuration.get("folders", [])

            # Convert the folders list back to a single rootFolder string
            if folders:
                root_folder = folders[0]
            else:
                root_folder = ""

            # Update the configuration JSON
            configuration["rootFolder"] = root_folder

            # Save the updated configuration back to the model
            endpoint.configuration = configuration
            endpoint.save()

    operations = [
        migrations.RunPython(
            migrate_to_support_multiple_folder_input,
            reverse_code=migrate_to_support_single_folder_input,
        ),
    ]
