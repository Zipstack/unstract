# Generated by Django 4.2.1 on 2025-03-13 13:33

import logging
from datetime import timedelta
from typing import Any

from django.db import migrations
from django.utils import timezone

logger = logging.getLogger(__name__)


def fill_wf_execution(apps: Any, schema_editor: Any) -> None:
    """Fills wf_execution field in ExecutionLog model.

    Uses UUID from execution_id to make the FK relationships in wf_execution_id.
    """
    ExecutionLog = apps.get_model(  # pylint: disable=invalid-name # NOSONAR
        "workflow_v2", "ExecutionLog"
    )
    WorkflowExecution = apps.get_model(  # pylint: disable=invalid-name # NOSONAR
        "workflow_v2", "WorkflowExecution"
    )
    # Since the ExecutionLog can grow to be a large table, performing this data
    # migration only for the last 30 days of logs. Others would be marked with NULL
    cutoff_date = timezone.now() - timedelta(days=30)
    logs = ExecutionLog.objects.filter(event_time__gte=cutoff_date)

    for log in logs:
        try:
            workflow_execution = WorkflowExecution.objects.get(id=log.execution_id)
            log.wf_execution = workflow_execution
            log.save()
        except WorkflowExecution.DoesNotExist:
            logger.warning(
                f"Missing WorkflowExecution '{log.execution_id}' for "
                f"ExecutionLog ID '{log.id}'."
            )


def reverse_fill_wf_execution(apps: Any, schema_editor: Any) -> None:
    """Reverses the forward migration.

    Removes the wf_execution_id FK relationship and populates execution_id instead.
    """
    ExecutionLog = apps.get_model(  # pylint: disable=invalid-name # NOSONAR
        "workflow_v2", "ExecutionLog"
    )
    cutoff_date = timezone.now() - timedelta(days=30)
    logs = ExecutionLog.objects.filter(event_time__gte=cutoff_date)

    for log in logs:
        if log.wf_execution:
            log.execution_id = log.wf_execution.id
            log.wf_execution = None
        log.save()


class Migration(migrations.Migration):

    dependencies = [
        ("workflow_v2", "0010_executionlog_wf_execution_and_more"),
    ]

    operations = [
        migrations.RunPython(fill_wf_execution, reverse_fill_wf_execution),
    ]
