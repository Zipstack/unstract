name: Unstract Docker Image Build and Push (Production)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Docker image tag"
        required: true
      set_as_latest:
        description: "Set as latest release"
        type: boolean
        default: false
        required: false

  release:
    types:
      - created

run-name: "[${{ github.event.release.tag_name || github.event.inputs.tag }}] Docker Image Build and Push (Production)"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service_name: [backend, frontend, platform-service, prompt-service, runner, x2text-service]

    steps:
      - name: Checkout code for release
        if: github.event_name == 'release'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Checkout code for branch
        if: github.event_name != 'release'
        uses: actions/checkout@v4

      # Set up Docker Buildx for better caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set version tag based on event type
      - name: Set version tag
        id: set-tag
        run: echo "DOCKER_VERSION_TAG=${{ github.event.release.tag_name || github.event.inputs.tag }}" >> $GITHUB_ENV

      # Set up additional tags for release builds
      - name: Set image tags
        id: tags
        run: |
          # Check if service exists in the config
          echo "Checking if service ${{ matrix.service_name }} exists in docker-compose.build.yaml"
          if ! grep -q "^  ${{ matrix.service_name }}:" ./docker/docker-compose.build.yaml; then
            echo "Service ${{ matrix.service_name }} not found in docker-compose.build.yaml" && exit 1
          fi

          # Set latest tag for releases or when explicitly requested
          echo "SEMVER_IMAGE_TAG=unstract/${{ matrix.service_name }}:${{ env.DOCKER_VERSION_TAG }}" >> $GITHUB_ENV

          # Set latest tag if it's a release or if set_as_latest is true
          if [ "${{ github.event_name }}" = "release" ] || [ "${{ github.event.inputs.set_as_latest }}" = "true" ]; then
            echo "LATEST_IMAGE_TAG=unstract/${{ matrix.service_name }}:latest" >> $GITHUB_ENV
          else
            echo "LATEST_IMAGE_TAG=" >> $GITHUB_ENV
          fi

      # Build and push using Docker Bake
      - name: Build and push image
        uses: docker/bake-action@v5
        env:
          VERSION: ${{ env.DOCKER_VERSION_TAG }}
        with:
          files: ./docker/docker-compose.build.yaml
          targets: ${{ matrix.service_name }}
          push: true
          set: |
            *.tags=${{ env.SEMVER_IMAGE_TAG }}
            ${{ env.LATEST_IMAGE_TAG && format('*.tags={0}', env.LATEST_IMAGE_TAG) || '' }}
            *.context=.
            *.args.VERSION=${{ env.DOCKER_VERSION_TAG }}
            *.cache-from=type=gha,scope=${{ matrix.service_name }}
            *.cache-to=type=gha,mode=max,scope=${{ matrix.service_name }}

  # Summary job that runs after all builds
  build-summary:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate build summary
        id: summary
        run: |
          # Initialize variables
          TOTAL_SERVICES=6
          JOBS_JSON='${{ toJson(needs.build-and-push) }}'

          # Check overall result
          if echo "$JOBS_JSON" | grep -q '"result":"success"'; then
            SUMMARY_STATUS="✅ All Docker builds successful"
            SUMMARY_COLOR="good"
          else
            SUMMARY_STATUS="❌ Some Docker builds failed"
            SUMMARY_COLOR="danger"
          fi

          echo "summary_status=$SUMMARY_STATUS" >> $GITHUB_OUTPUT
          echo "summary_color=$SUMMARY_COLOR" >> $GITHUB_OUTPUT
          echo "total_count=$TOTAL_SERVICES" >> $GITHUB_OUTPUT

      # Write to GitHub Summary
      - name: Write GitHub Summary
        run: |
          echo "# 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.summary.outputs.summary_status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag**: ${{ github.event.release.tag_name || github.event.inputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Total Services**: ${{ steps.summary.outputs.total_count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Services" >> $GITHUB_STEP_SUMMARY
          echo "- backend" >> $GITHUB_STEP_SUMMARY
          echo "- frontend" >> $GITHUB_STEP_SUMMARY
          echo "- platform-service" >> $GITHUB_STEP_SUMMARY
          echo "- prompt-service" >> $GITHUB_STEP_SUMMARY
          echo "- runner" >> $GITHUB_STEP_SUMMARY
          echo "- x2text-service" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      # Send summary notification to Slack
      - name: Send Slack summary notification
        if: always()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "${{ steps.summary.outputs.summary_status }}",
              "attachments": [
                {
                  "color": "${{ steps.summary.outputs.summary_color }}",
                  "fields": [
                    {
                      "title": "Docker Tag",
                      "value": "${{ github.event.release.tag_name || github.event.inputs.tag }}",
                      "short": true
                    },
                    {
                      "title": "Total Services",
                      "value": "${{ steps.summary.outputs.total_count }}",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Workflow",
                      "value": "${{ github.workflow }}",
                      "short": true
                    },
                    {
                      "title": "Services",
                      "value": "backend, frontend, platform-service, prompt-service, runner, x2text-service",
                      "short": false
                    },
                    {
                      "title": "Workflow Run",
                      "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "short": false
                    }
                  ],
                  "footer": "GitHub Actions",
                  "ts": "${{ github.event.head_commit.timestamp }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
