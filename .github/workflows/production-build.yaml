name: Unstract Docker Image Build and Push (Production)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Docker image tag"
        required: true

  release:
    types:
      - created

run-name: "[${{ github.event.release.tag_name || github.event.inputs.tag }}] Docker Image Build and Push (Production)"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service_name: [backend, frontend, platform-service, prompt-service, runner, x2text-service]

    steps:
      - name: Checkout code for release
        if: github.event_name == 'release'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Checkout code for branch
        if: github.event_name != 'release'
        uses: actions/checkout@v4

      # Set up Docker Buildx for better caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set version tag based on event type
      - name: Set version tag
        id: set-tag
        run: echo "DOCKER_VERSION_TAG=${{ github.event.release.tag_name || github.event.inputs.tag }}" >> $GITHUB_ENV

      # Set up additional tags for release builds
      - name: Set image tags
        id: tags
        run: |
          # Check if service exists in the config
          echo "Checking if service ${{ matrix.service_name }} exists in docker-compose.build.yaml"
          if ! grep -q "^  ${{ matrix.service_name }}:" ./docker/docker-compose.build.yaml; then
            echo "Service ${{ matrix.service_name }} not found in docker-compose.build.yaml" && exit 1
          fi

          # Set latest tag for releases
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "latest=true" >> $GITHUB_OUTPUT
            echo "IMAGE_TAGS=unstract/${{ matrix.service_name }}:${{ env.DOCKER_VERSION_TAG }},unstract/${{ matrix.service_name }}:latest" >> $GITHUB_ENV
          else
            echo "latest=false" >> $GITHUB_OUTPUT
            echo "IMAGE_TAGS=unstract/${{ matrix.service_name }}:${{ env.DOCKER_VERSION_TAG }}" >> $GITHUB_ENV
          fi

      # Build and push using Docker Bake
      - name: Build and push image
        uses: docker/bake-action@v5
        env:
          VERSION: ${{ env.DOCKER_VERSION_TAG }}
        with:
          files: ./docker/docker-compose.build.yaml
          targets: ${{ matrix.service_name }}
          # push: true
          push: false  # Remove after testing

          # Context resolved along with docker-compose.build.yaml, ensure resolved path is repo root
          set: |
            *.tags=${{ env.IMAGE_TAGS }}
            *.context=.
            *.args.VERSION=${{ env.DOCKER_VERSION_TAG }}
            *.cache-from=type=gha,scope=${{ matrix.service_name }}
            *.cache-to=type=gha,mode=max,scope=${{ matrix.service_name }}
