name: Unstract Tools Docker Image Build and Push (Development)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Docker image tag"
        required: true
        default: "latest"
      service_name:
        description: "Tool to build"
        required: true
        default: "tool-structure" # Provide a default value
        type: choice
        options: # Define available options
          - tool-classifier
          - tool-structure
          - tool-text-extractor
          - tool-sidecar

run-name: "[${{ inputs.service_name }}:${{ inputs.tag }}] Docker Image Build and Push (Development)"

jobs:
    build-and-push:
      runs-on: ubuntu-latest
      steps:
        - name: Output Inputs
          run: echo "${{ toJSON(github.event.inputs) }}"

        - name: Checkout code
          uses: actions/checkout@v4

        # Set up Docker Buildx for better caching
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        # Log in to Docker Hub
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        # Validate service exists in docker-compose.build.yaml
        - name: Validate service exists
          run: |
            if ! grep -q "${{ github.event.inputs.service_name }}:" ./docker/docker-compose.build.yaml; then
              echo "Error: Service ${{ github.event.inputs.service_name }} not found in docker-compose.build.yaml"
              exit 1
            fi

        # Set version tag for Docker images
        - name: Set version tag
          run: echo "DOCKER_VERSION_TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV

        # Build and push using Docker Bake
        - name: Build and push using Docker Bake
          uses: docker/bake-action@v5
          env:
            VERSION: ${{ github.event.inputs.tag }}
          with:
            files: ./docker/docker-compose.build.yaml
            targets: ${{ github.event.inputs.service_name }}
            # push: true
            push: false  # Remove after testing
            set: |
              *.cache-from=type=gha,scope=${{ github.event.inputs.service_name }}
              *.cache-to=type=gha,mode=max,scope=${{ github.event.inputs.service_name }}
              *.context=.
              *.args.PROFILE=tools
