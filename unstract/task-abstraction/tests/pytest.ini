[tool:pytest]
# Pytest configuration for task abstraction library
minversion = 7.4
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test* *Test
python_functions = test_*

# Async support
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Backend-specific test dependencies and markers
markers =
    unit: Unit tests that don't require external dependencies
    contract: Contract tests that validate backend adapter compliance
    integration: Integration tests that require real backends
    celery: Tests that require Celery backend
    hatchet: Tests that require Hatchet backend
    temporal: Tests that require Temporal backend
    migration: Tests for migration scenarios and feature flags
    performance: Performance and load tests
    slow: Slow-running tests (skipped by default)

# Test execution options
addopts =
    --strict-markers
    --strict-config
    --disable-warnings
    --tb=short
    --cov=src/unstract/task_abstraction
    --cov-report=html:htmlcov
    --cov-report=term-missing:skip-covered
    --cov-fail-under=85
    -v

# Parallel execution for different test categories
# Use: pytest -m "not slow" for fast tests only
# Use: pytest -m "contract" for contract tests only
# Use: pytest -n auto for parallel execution

# Test discovery patterns
norecursedirs =
    .git
    .tox
    dist
    build
    *.egg
    htmlcov
    .coverage

# Backend-specific test environment configuration
env =
    # Default to fake/mock backends for faster tests
    TASK_QUEUE_BACKEND = memory
    CELERY_BROKER_URL = memory://localhost//
    CELERY_RESULT_BACKEND = cache+memory://
    HATCHET_SERVER_URL = http://localhost:8080
    TEMPORAL_HOST_PORT = localhost:7233

    # Feature flags for migration testing
    FLIPT_SERVER_URL = http://localhost:8081
    FLIPT_NAMESPACE = test

    # Test-specific settings
    TASK_ABSTRACTION_TEST_MODE = true
    LOG_LEVEL = ERROR

# Timeout settings for async tests
timeout = 30
timeout_method = thread

# Coverage configuration
[coverage:run]
source = src/unstract/task_abstraction
omit =
    */tests/*
    */test_*
    */__init__.py
    */migrations/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    @abstractmethod
    @abc.abstractmethod

show_missing = True
precision = 2
